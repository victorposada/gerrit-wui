package gerrit

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"
	"os"
	log "github.com/sirupsen/logrus"
)

type Repositorio struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func GetProjects() (map[string]Repositorio, error) {
	repos, err := GetRequest("a/projects/")
	return repos, err
}

func GetChanges() (map[string]Repositorio, error){
	changes, err := GetRequest("a/changes")
	return changes, err
}

func GetRequest(path string) (map[string]Repositorio, error) {
	gerrit_url := os.Getenv("GERRIT_URL") + path
	gerrit_user := os.Getenv("GERRIT_USER")
	gerrit_token := os.Getenv("GERRIT_TOKEN")

	log.Debug("Get request to " + gerrit_url)
	req, err := http.NewRequest("GET", gerrit_url, nil)
	if err != nil {
		return nil, err
	}

	req.SetBasicAuth(gerrit_user, gerrit_token)

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	bodyStr := string(body)
	bodyStr = strings.TrimPrefix(bodyStr, ")]}'\n")

	//fmt.Println(bodyStr)

	var repos map[string]Repositorio
	if err := json.Unmarshal([]byte(bodyStr), &repos); err != nil {
		return nil, err
	}
	for name ,id := range repos {
		fmt.Println(name, id )
	}
	return repos, nil
}
